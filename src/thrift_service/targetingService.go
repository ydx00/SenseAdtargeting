// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrift_service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type AdTargetingService interface {
  // Parameters:
  //  - AppId
  //  - UserId
  //  - BroadcasterId
  //  - RequestId
  Search(appId string, userId string, broadcasterId string, requestId string) (r string, err error)
  // Parameters:
  //  - AppId
  //  - UserId
  //  - BroadcasterId
  //  - AdMode
  //  - RequestId
  SearchV2(appId string, userId string, broadcasterId string, adMode int32, requestId string) (r string, err error)
  // Parameters:
  //  - AppId
  //  - UserId
  //  - RequestId
  Preload(appId string, userId string, requestId string) (r string, err error)
  // Parameters:
  //  - AppId
  //  - UserId
  //  - AdMode
  //  - RequestId
  PreloadV2(appId string, userId string, adMode int32, requestId string) (r string, err error)
  // Parameters:
  //  - AppId
  //  - Conditions
  UserCoverage(appId string, conditions string) (r int64, err error)
}

type AdTargetingServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewAdTargetingServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AdTargetingServiceClient {
  return &AdTargetingServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewAdTargetingServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AdTargetingServiceClient {
  return &AdTargetingServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - AppId
//  - UserId
//  - BroadcasterId
//  - RequestId
func (p *AdTargetingServiceClient) Search(appId string, userId string, broadcasterId string, requestId string) (r string, err error) {
  if err = p.sendSearch(appId, userId, broadcasterId, requestId); err != nil { return }
  return p.recvSearch()
}

func (p *AdTargetingServiceClient) sendSearch(appId string, userId string, broadcasterId string, requestId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("search", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AdTargetingServiceSearchArgs{
  AppId : appId,
  UserId : userId,
  BroadcasterId : broadcasterId,
  RequestId : requestId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AdTargetingServiceClient) recvSearch() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "search" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "search failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "search failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "search failed: invalid message type")
    return
  }
  result := AdTargetingServiceSearchResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AppId
//  - UserId
//  - BroadcasterId
//  - AdMode
//  - RequestId
func (p *AdTargetingServiceClient) SearchV2(appId string, userId string, broadcasterId string, adMode int32, requestId string) (r string, err error) {
  if err = p.sendSearchV2(appId, userId, broadcasterId, adMode, requestId); err != nil { return }
  return p.recvSearchV2()
}

func (p *AdTargetingServiceClient) sendSearchV2(appId string, userId string, broadcasterId string, adMode int32, requestId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("searchV2", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AdTargetingServiceSearchV2Args{
  AppId : appId,
  UserId : userId,
  BroadcasterId : broadcasterId,
  AdMode : adMode,
  RequestId : requestId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AdTargetingServiceClient) recvSearchV2() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "searchV2" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "searchV2 failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "searchV2 failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "searchV2 failed: invalid message type")
    return
  }
  result := AdTargetingServiceSearchV2Result{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AppId
//  - UserId
//  - RequestId
func (p *AdTargetingServiceClient) Preload(appId string, userId string, requestId string) (r string, err error) {
  if err = p.sendPreload(appId, userId, requestId); err != nil { return }
  return p.recvPreload()
}

func (p *AdTargetingServiceClient) sendPreload(appId string, userId string, requestId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("preload", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AdTargetingServicePreloadArgs{
  AppId : appId,
  UserId : userId,
  RequestId : requestId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AdTargetingServiceClient) recvPreload() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "preload" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "preload failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "preload failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "preload failed: invalid message type")
    return
  }
  result := AdTargetingServicePreloadResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AppId
//  - UserId
//  - AdMode
//  - RequestId
func (p *AdTargetingServiceClient) PreloadV2(appId string, userId string, adMode int32, requestId string) (r string, err error) {
  if err = p.sendPreloadV2(appId, userId, adMode, requestId); err != nil { return }
  return p.recvPreloadV2()
}

func (p *AdTargetingServiceClient) sendPreloadV2(appId string, userId string, adMode int32, requestId string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("preloadV2", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AdTargetingServicePreloadV2Args{
  AppId : appId,
  UserId : userId,
  AdMode : adMode,
  RequestId : requestId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AdTargetingServiceClient) recvPreloadV2() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "preloadV2" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "preloadV2 failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "preloadV2 failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "preloadV2 failed: invalid message type")
    return
  }
  result := AdTargetingServicePreloadV2Result{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AppId
//  - Conditions
func (p *AdTargetingServiceClient) UserCoverage(appId string, conditions string) (r int64, err error) {
  if err = p.sendUserCoverage(appId, conditions); err != nil { return }
  return p.recvUserCoverage()
}

func (p *AdTargetingServiceClient) sendUserCoverage(appId string, conditions string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("userCoverage", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := AdTargetingServiceUserCoverageArgs{
  AppId : appId,
  Conditions : conditions,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *AdTargetingServiceClient) recvUserCoverage() (value int64, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "userCoverage" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "userCoverage failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "userCoverage failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "userCoverage failed: invalid message type")
    return
  }
  result := AdTargetingServiceUserCoverageResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type AdTargetingServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler AdTargetingService
}

func (p *AdTargetingServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *AdTargetingServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *AdTargetingServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewAdTargetingServiceProcessor(handler AdTargetingService) *AdTargetingServiceProcessor {

  self10 := &AdTargetingServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["search"] = &adTargetingServiceProcessorSearch{handler:handler}
  self10.processorMap["searchV2"] = &adTargetingServiceProcessorSearchV2{handler:handler}
  self10.processorMap["preload"] = &adTargetingServiceProcessorPreload{handler:handler}
  self10.processorMap["preloadV2"] = &adTargetingServiceProcessorPreloadV2{handler:handler}
  self10.processorMap["userCoverage"] = &adTargetingServiceProcessorUserCoverage{handler:handler}
return self10
}

func (p *AdTargetingServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x11.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x11

}

type adTargetingServiceProcessorSearch struct {
  handler AdTargetingService
}

func (p *adTargetingServiceProcessorSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdTargetingServiceSearchArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("search", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AdTargetingServiceSearchResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Search(args.AppId, args.UserId, args.BroadcasterId, args.RequestId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing search: " + err2.Error())
    oprot.WriteMessageBegin("search", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("search", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type adTargetingServiceProcessorSearchV2 struct {
  handler AdTargetingService
}

func (p *adTargetingServiceProcessorSearchV2) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdTargetingServiceSearchV2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("searchV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AdTargetingServiceSearchV2Result{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SearchV2(args.AppId, args.UserId, args.BroadcasterId, args.AdMode, args.RequestId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing searchV2: " + err2.Error())
    oprot.WriteMessageBegin("searchV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("searchV2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type adTargetingServiceProcessorPreload struct {
  handler AdTargetingService
}

func (p *adTargetingServiceProcessorPreload) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdTargetingServicePreloadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("preload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AdTargetingServicePreloadResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Preload(args.AppId, args.UserId, args.RequestId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing preload: " + err2.Error())
    oprot.WriteMessageBegin("preload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("preload", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type adTargetingServiceProcessorPreloadV2 struct {
  handler AdTargetingService
}

func (p *adTargetingServiceProcessorPreloadV2) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdTargetingServicePreloadV2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("preloadV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AdTargetingServicePreloadV2Result{}
var retval string
  var err2 error
  if retval, err2 = p.handler.PreloadV2(args.AppId, args.UserId, args.AdMode, args.RequestId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing preloadV2: " + err2.Error())
    oprot.WriteMessageBegin("preloadV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("preloadV2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type adTargetingServiceProcessorUserCoverage struct {
  handler AdTargetingService
}

func (p *adTargetingServiceProcessorUserCoverage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AdTargetingServiceUserCoverageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("userCoverage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AdTargetingServiceUserCoverageResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.UserCoverage(args.AppId, args.Conditions); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing userCoverage: " + err2.Error())
    oprot.WriteMessageBegin("userCoverage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("userCoverage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - AppId
//  - UserId
//  - BroadcasterId
//  - RequestId
type AdTargetingServiceSearchArgs struct {
  AppId string `thrift:"appId,1" db:"appId" json:"appId"`
  UserId string `thrift:"userId,2" db:"userId" json:"userId"`
  BroadcasterId string `thrift:"broadcasterId,3" db:"broadcasterId" json:"broadcasterId"`
  RequestId string `thrift:"requestId,4" db:"requestId" json:"requestId"`
}

func NewAdTargetingServiceSearchArgs() *AdTargetingServiceSearchArgs {
  return &AdTargetingServiceSearchArgs{}
}


func (p *AdTargetingServiceSearchArgs) GetAppId() string {
  return p.AppId
}

func (p *AdTargetingServiceSearchArgs) GetUserId() string {
  return p.UserId
}

func (p *AdTargetingServiceSearchArgs) GetBroadcasterId() string {
  return p.BroadcasterId
}

func (p *AdTargetingServiceSearchArgs) GetRequestId() string {
  return p.RequestId
}
func (p *AdTargetingServiceSearchArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdTargetingServiceSearchArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *AdTargetingServiceSearchArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AdTargetingServiceSearchArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BroadcasterId = v
}
  return nil
}

func (p *AdTargetingServiceSearchArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RequestId = v
}
  return nil
}

func (p *AdTargetingServiceSearchArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdTargetingServiceSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appId: ", p), err) }
  return err
}

func (p *AdTargetingServiceSearchArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AdTargetingServiceSearchArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("broadcasterId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:broadcasterId: ", p), err) }
  if err := oprot.WriteString(string(p.BroadcasterId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.broadcasterId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:broadcasterId: ", p), err) }
  return err
}

func (p *AdTargetingServiceSearchArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:requestId: ", p), err) }
  if err := oprot.WriteString(string(p.RequestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:requestId: ", p), err) }
  return err
}

func (p *AdTargetingServiceSearchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdTargetingServiceSearchArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdTargetingServiceSearchResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdTargetingServiceSearchResult() *AdTargetingServiceSearchResult {
  return &AdTargetingServiceSearchResult{}
}

var AdTargetingServiceSearchResult_Success_DEFAULT string
func (p *AdTargetingServiceSearchResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AdTargetingServiceSearchResult_Success_DEFAULT
  }
return *p.Success
}
func (p *AdTargetingServiceSearchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdTargetingServiceSearchResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdTargetingServiceSearchResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AdTargetingServiceSearchResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("search_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdTargetingServiceSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdTargetingServiceSearchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdTargetingServiceSearchResult(%+v)", *p)
}

// Attributes:
//  - AppId
//  - UserId
//  - BroadcasterId
//  - AdMode
//  - RequestId
type AdTargetingServiceSearchV2Args struct {
  AppId string `thrift:"appId,1" db:"appId" json:"appId"`
  UserId string `thrift:"userId,2" db:"userId" json:"userId"`
  BroadcasterId string `thrift:"broadcasterId,3" db:"broadcasterId" json:"broadcasterId"`
  AdMode int32 `thrift:"adMode,4" db:"adMode" json:"adMode"`
  RequestId string `thrift:"requestId,5" db:"requestId" json:"requestId"`
}

func NewAdTargetingServiceSearchV2Args() *AdTargetingServiceSearchV2Args {
  return &AdTargetingServiceSearchV2Args{}
}


func (p *AdTargetingServiceSearchV2Args) GetAppId() string {
  return p.AppId
}

func (p *AdTargetingServiceSearchV2Args) GetUserId() string {
  return p.UserId
}

func (p *AdTargetingServiceSearchV2Args) GetBroadcasterId() string {
  return p.BroadcasterId
}

func (p *AdTargetingServiceSearchV2Args) GetAdMode() int32 {
  return p.AdMode
}

func (p *AdTargetingServiceSearchV2Args) GetRequestId() string {
  return p.RequestId
}
func (p *AdTargetingServiceSearchV2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdTargetingServiceSearchV2Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *AdTargetingServiceSearchV2Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AdTargetingServiceSearchV2Args)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BroadcasterId = v
}
  return nil
}

func (p *AdTargetingServiceSearchV2Args)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AdMode = v
}
  return nil
}

func (p *AdTargetingServiceSearchV2Args)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RequestId = v
}
  return nil
}

func (p *AdTargetingServiceSearchV2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdTargetingServiceSearchV2Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appId: ", p), err) }
  return err
}

func (p *AdTargetingServiceSearchV2Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AdTargetingServiceSearchV2Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("broadcasterId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:broadcasterId: ", p), err) }
  if err := oprot.WriteString(string(p.BroadcasterId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.broadcasterId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:broadcasterId: ", p), err) }
  return err
}

func (p *AdTargetingServiceSearchV2Args) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("adMode", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:adMode: ", p), err) }
  if err := oprot.WriteI32(int32(p.AdMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.adMode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:adMode: ", p), err) }
  return err
}

func (p *AdTargetingServiceSearchV2Args) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:requestId: ", p), err) }
  if err := oprot.WriteString(string(p.RequestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:requestId: ", p), err) }
  return err
}

func (p *AdTargetingServiceSearchV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdTargetingServiceSearchV2Args(%+v)", *p)
}

// Attributes:
//  - Success
type AdTargetingServiceSearchV2Result struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdTargetingServiceSearchV2Result() *AdTargetingServiceSearchV2Result {
  return &AdTargetingServiceSearchV2Result{}
}

var AdTargetingServiceSearchV2Result_Success_DEFAULT string
func (p *AdTargetingServiceSearchV2Result) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AdTargetingServiceSearchV2Result_Success_DEFAULT
  }
return *p.Success
}
func (p *AdTargetingServiceSearchV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdTargetingServiceSearchV2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdTargetingServiceSearchV2Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AdTargetingServiceSearchV2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdTargetingServiceSearchV2Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdTargetingServiceSearchV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdTargetingServiceSearchV2Result(%+v)", *p)
}

// Attributes:
//  - AppId
//  - UserId
//  - RequestId
type AdTargetingServicePreloadArgs struct {
  AppId string `thrift:"appId,1" db:"appId" json:"appId"`
  UserId string `thrift:"userId,2" db:"userId" json:"userId"`
  RequestId string `thrift:"requestId,3" db:"requestId" json:"requestId"`
}

func NewAdTargetingServicePreloadArgs() *AdTargetingServicePreloadArgs {
  return &AdTargetingServicePreloadArgs{}
}


func (p *AdTargetingServicePreloadArgs) GetAppId() string {
  return p.AppId
}

func (p *AdTargetingServicePreloadArgs) GetUserId() string {
  return p.UserId
}

func (p *AdTargetingServicePreloadArgs) GetRequestId() string {
  return p.RequestId
}
func (p *AdTargetingServicePreloadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdTargetingServicePreloadArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *AdTargetingServicePreloadArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AdTargetingServicePreloadArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RequestId = v
}
  return nil
}

func (p *AdTargetingServicePreloadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("preload_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdTargetingServicePreloadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appId: ", p), err) }
  return err
}

func (p *AdTargetingServicePreloadArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AdTargetingServicePreloadArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestId: ", p), err) }
  if err := oprot.WriteString(string(p.RequestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestId: ", p), err) }
  return err
}

func (p *AdTargetingServicePreloadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdTargetingServicePreloadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdTargetingServicePreloadResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdTargetingServicePreloadResult() *AdTargetingServicePreloadResult {
  return &AdTargetingServicePreloadResult{}
}

var AdTargetingServicePreloadResult_Success_DEFAULT string
func (p *AdTargetingServicePreloadResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AdTargetingServicePreloadResult_Success_DEFAULT
  }
return *p.Success
}
func (p *AdTargetingServicePreloadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdTargetingServicePreloadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdTargetingServicePreloadResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AdTargetingServicePreloadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("preload_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdTargetingServicePreloadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdTargetingServicePreloadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdTargetingServicePreloadResult(%+v)", *p)
}

// Attributes:
//  - AppId
//  - UserId
//  - AdMode
//  - RequestId
type AdTargetingServicePreloadV2Args struct {
  AppId string `thrift:"appId,1" db:"appId" json:"appId"`
  UserId string `thrift:"userId,2" db:"userId" json:"userId"`
  AdMode int32 `thrift:"adMode,3" db:"adMode" json:"adMode"`
  RequestId string `thrift:"requestId,4" db:"requestId" json:"requestId"`
}

func NewAdTargetingServicePreloadV2Args() *AdTargetingServicePreloadV2Args {
  return &AdTargetingServicePreloadV2Args{}
}


func (p *AdTargetingServicePreloadV2Args) GetAppId() string {
  return p.AppId
}

func (p *AdTargetingServicePreloadV2Args) GetUserId() string {
  return p.UserId
}

func (p *AdTargetingServicePreloadV2Args) GetAdMode() int32 {
  return p.AdMode
}

func (p *AdTargetingServicePreloadV2Args) GetRequestId() string {
  return p.RequestId
}
func (p *AdTargetingServicePreloadV2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdTargetingServicePreloadV2Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *AdTargetingServicePreloadV2Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *AdTargetingServicePreloadV2Args)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AdMode = v
}
  return nil
}

func (p *AdTargetingServicePreloadV2Args)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RequestId = v
}
  return nil
}

func (p *AdTargetingServicePreloadV2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("preloadV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdTargetingServicePreloadV2Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appId: ", p), err) }
  return err
}

func (p *AdTargetingServicePreloadV2Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *AdTargetingServicePreloadV2Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("adMode", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:adMode: ", p), err) }
  if err := oprot.WriteI32(int32(p.AdMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.adMode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:adMode: ", p), err) }
  return err
}

func (p *AdTargetingServicePreloadV2Args) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:requestId: ", p), err) }
  if err := oprot.WriteString(string(p.RequestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requestId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:requestId: ", p), err) }
  return err
}

func (p *AdTargetingServicePreloadV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdTargetingServicePreloadV2Args(%+v)", *p)
}

// Attributes:
//  - Success
type AdTargetingServicePreloadV2Result struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdTargetingServicePreloadV2Result() *AdTargetingServicePreloadV2Result {
  return &AdTargetingServicePreloadV2Result{}
}

var AdTargetingServicePreloadV2Result_Success_DEFAULT string
func (p *AdTargetingServicePreloadV2Result) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AdTargetingServicePreloadV2Result_Success_DEFAULT
  }
return *p.Success
}
func (p *AdTargetingServicePreloadV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdTargetingServicePreloadV2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdTargetingServicePreloadV2Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AdTargetingServicePreloadV2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("preloadV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdTargetingServicePreloadV2Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdTargetingServicePreloadV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdTargetingServicePreloadV2Result(%+v)", *p)
}

// Attributes:
//  - AppId
//  - Conditions
type AdTargetingServiceUserCoverageArgs struct {
  AppId string `thrift:"appId,1" db:"appId" json:"appId"`
  Conditions string `thrift:"conditions,2" db:"conditions" json:"conditions"`
}

func NewAdTargetingServiceUserCoverageArgs() *AdTargetingServiceUserCoverageArgs {
  return &AdTargetingServiceUserCoverageArgs{}
}


func (p *AdTargetingServiceUserCoverageArgs) GetAppId() string {
  return p.AppId
}

func (p *AdTargetingServiceUserCoverageArgs) GetConditions() string {
  return p.Conditions
}
func (p *AdTargetingServiceUserCoverageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdTargetingServiceUserCoverageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *AdTargetingServiceUserCoverageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Conditions = v
}
  return nil
}

func (p *AdTargetingServiceUserCoverageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("userCoverage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdTargetingServiceUserCoverageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appId: ", p), err) }
  return err
}

func (p *AdTargetingServiceUserCoverageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("conditions", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:conditions: ", p), err) }
  if err := oprot.WriteString(string(p.Conditions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.conditions (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:conditions: ", p), err) }
  return err
}

func (p *AdTargetingServiceUserCoverageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdTargetingServiceUserCoverageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AdTargetingServiceUserCoverageResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdTargetingServiceUserCoverageResult() *AdTargetingServiceUserCoverageResult {
  return &AdTargetingServiceUserCoverageResult{}
}

var AdTargetingServiceUserCoverageResult_Success_DEFAULT int64
func (p *AdTargetingServiceUserCoverageResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return AdTargetingServiceUserCoverageResult_Success_DEFAULT
  }
return *p.Success
}
func (p *AdTargetingServiceUserCoverageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdTargetingServiceUserCoverageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdTargetingServiceUserCoverageResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AdTargetingServiceUserCoverageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("userCoverage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdTargetingServiceUserCoverageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdTargetingServiceUserCoverageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdTargetingServiceUserCoverageResult(%+v)", *p)
}


